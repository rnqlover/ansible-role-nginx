---
# Variable setup.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Define nginx_user.
  set_fact:
    nginx_user: "{{ __nginx_user }}"
  when: nginx_user is not defined

# Setup/install tasks.
- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Ubuntu.yml
  when: ansible_distribution == 'Ubuntu'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: setup-FreeBSD.yml
  when: ansible_os_family == 'FreeBSD'

- include_tasks: setup-OpenBSD.yml
  when: ansible_os_family == 'OpenBSD'

- include_tasks: setup-Archlinux.yml
  when: ansible_os_family == 'Archlinux'

# Vhost configuration.
- import_tasks: vhosts.yml

# - debug:
#     msg: "{{ nginx_vhosts[0].server_name }}"

# - name: Make upstram directory
#   file:
#     path: "{{ nginx_conf_path }}/{{ nginx_vhosts.server_name }}.d"
#     state: directory


# Nginx setup.
- name: Copy nginx configuration in place.
  template:
    src: "{{ nginx_conf_template }}"
    dest: "{{ nginx_conf_file_path }}"
    owner: root
    group: "{{ root_group }}"
    mode: 0644
  notify:
    - reload nginx

- name: generate dhparam
  openssl_dhparam:
    path: /etc/nginx/ssl/pki/dhparam.pem

- name: create log dirs
  file:
    path: /var/log/nginx/{{ nginx_vhosts[0].server_name }}
    state: directory

- name: Ensure nginx is started and enabled to start at boot.
  service:
    name: nginx
    state: started
    enabled: yes
